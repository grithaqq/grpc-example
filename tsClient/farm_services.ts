// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.1
//   protoc               v3.20.3
// source: farm_services.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface CropRequest {
  cropName: string;
}

export interface CropResponse {
  cropData: string;
}

function createBaseCropRequest(): CropRequest {
  return { cropName: "" };
}

export const CropRequest: MessageFns<CropRequest> = {
  encode(message: CropRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cropName !== "") {
      writer.uint32(10).string(message.cropName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CropRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCropRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cropName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CropRequest {
    return { cropName: isSet(object.cropName) ? globalThis.String(object.cropName) : "" };
  },

  toJSON(message: CropRequest): unknown {
    const obj: any = {};
    if (message.cropName !== "") {
      obj.cropName = message.cropName;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CropRequest>, I>>(base?: I): CropRequest {
    return CropRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CropRequest>, I>>(object: I): CropRequest {
    const message = createBaseCropRequest();
    message.cropName = object.cropName ?? "";
    return message;
  },
};

function createBaseCropResponse(): CropResponse {
  return { cropData: "" };
}

export const CropResponse: MessageFns<CropResponse> = {
  encode(message: CropResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cropData !== "") {
      writer.uint32(10).string(message.cropData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CropResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCropResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cropData = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CropResponse {
    return { cropData: isSet(object.cropData) ? globalThis.String(object.cropData) : "" };
  },

  toJSON(message: CropResponse): unknown {
    const obj: any = {};
    if (message.cropData !== "") {
      obj.cropData = message.cropData;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CropResponse>, I>>(base?: I): CropResponse {
    return CropResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CropResponse>, I>>(object: I): CropResponse {
    const message = createBaseCropResponse();
    message.cropData = object.cropData ?? "";
    return message;
  },
};

export interface CropMonitor {
  GetCropData(request: CropRequest): Promise<CropResponse>;
}

export const CropMonitorServiceName = "CropMonitor";
export class CropMonitorClientImpl implements CropMonitor {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || CropMonitorServiceName;
    this.rpc = rpc;
    this.GetCropData = this.GetCropData.bind(this);
  }
  GetCropData(request: CropRequest): Promise<CropResponse> {
    const data = CropRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetCropData", data);
    return promise.then((data) => CropResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
